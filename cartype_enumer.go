// Code generated by "enumer -type=CarType"; DO NOT EDIT.

package main

import (
	"fmt"
	"strings"
)

const _CarTypeName = "SedanHatchbackMPVSUVCrossoverCoupeConvertible"

var _CarTypeIndex = [...]uint8{0, 5, 14, 17, 20, 29, 34, 45}

const _CarTypeLowerName = "sedanhatchbackmpvsuvcrossovercoupeconvertible"

func (i CarType) String() string {
	i -= 1
	if i < 0 || i >= CarType(len(_CarTypeIndex)-1) {
		return fmt.Sprintf("CarType(%d)", i+1)
	}
	return _CarTypeName[_CarTypeIndex[i]:_CarTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CarTypeNoOp() {
	var x [1]struct{}
	_ = x[Sedan-(1)]
	_ = x[Hatchback-(2)]
	_ = x[MPV-(3)]
	_ = x[SUV-(4)]
	_ = x[Crossover-(5)]
	_ = x[Coupe-(6)]
	_ = x[Convertible-(7)]
}

var _CarTypeValues = []CarType{Sedan, Hatchback, MPV, SUV, Crossover, Coupe, Convertible}

var _CarTypeNameToValueMap = map[string]CarType{
	_CarTypeName[0:5]:        Sedan,
	_CarTypeLowerName[0:5]:   Sedan,
	_CarTypeName[5:14]:       Hatchback,
	_CarTypeLowerName[5:14]:  Hatchback,
	_CarTypeName[14:17]:      MPV,
	_CarTypeLowerName[14:17]: MPV,
	_CarTypeName[17:20]:      SUV,
	_CarTypeLowerName[17:20]: SUV,
	_CarTypeName[20:29]:      Crossover,
	_CarTypeLowerName[20:29]: Crossover,
	_CarTypeName[29:34]:      Coupe,
	_CarTypeLowerName[29:34]: Coupe,
	_CarTypeName[34:45]:      Convertible,
	_CarTypeLowerName[34:45]: Convertible,
}

var _CarTypeNames = []string{
	_CarTypeName[0:5],
	_CarTypeName[5:14],
	_CarTypeName[14:17],
	_CarTypeName[17:20],
	_CarTypeName[20:29],
	_CarTypeName[29:34],
	_CarTypeName[34:45],
}

// CarTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CarTypeString(s string) (CarType, error) {
	if val, ok := _CarTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CarTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CarType values", s)
}

// CarTypeValues returns all values of the enum
func CarTypeValues() []CarType {
	return _CarTypeValues
}

// CarTypeStrings returns a slice of all String values of the enum
func CarTypeStrings() []string {
	strs := make([]string, len(_CarTypeNames))
	copy(strs, _CarTypeNames)
	return strs
}

// IsACarType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CarType) IsACarType() bool {
	for _, v := range _CarTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
